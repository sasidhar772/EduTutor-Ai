# -*- coding: utf-8 -*-
"""EduTutor  AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/163hRZtgxsqyFRZCfgM9_YynhQgiYFKJO
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install deep-translator

import gradio as gr
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import random

# === Load IBM Granite Model ===
model_name = "ibm-granite/granite-3.3-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype="auto", device_map="auto")
quiz_pipeline = pipeline("text-generation", model=model, tokenizer=tokenizer)

# === Mock Data Stores ===
user_sessions = {}
performance_db = {}

# === Available Subjects ===
available_subjects = ["Artificial Intelligence", "Data Science", "Machine Learning"]

# === Function: Login ===
def login(username):
    user_sessions[username] = {"courses": [], "quiz_history": []}
    return f"Welcome {username}! Please sync your courses."

# === Function: Course Sync (Mocked) ===
def sync_courses(username):
    user_sessions[username]["courses"] = available_subjects
    return f"Synced Courses: {', '.join(available_subjects)}"

# === Function: Generate Quiz WITHOUT Answers ===
def generate_quiz(username, subject):
    prompt = (
        f"Generate a 3-question multiple-choice quiz on the topic of {subject}. "
        "Each question should have four options (A, B, C, D). "
        "Do not provide answers or explanations. Number the questions clearly."
    )
    result = quiz_pipeline(prompt, max_new_tokens=300, do_sample=True, temperature=0.6)[0]["generated_text"]
    user_sessions[username]["quiz_history"].append({"subject": subject, "quiz": result})
    return result

# === Function: Evaluate Answers (Random Score for Demo) ===
def evaluate_answers(username, answers):
    score = random.randint(1, 3)
    performance_db.setdefault(username, []).append(score)
    return f"Your answers have been submitted.\nEstimated Score: {score}/3"

# === Function: View Performance ===
def view_performance(username):
    scores = performance_db.get(username, [])
    if not scores:
        return "No performance data available."
    avg_score = sum(scores) / len(scores)
    return f"Scores: {scores}\nAverage Score: {avg_score:.2f}"

# === Gradio UI ===
with gr.Blocks(title="EduTutor AI") as demo:
    gr.Markdown("# ðŸŽ“ EduTutor AI - Personalized Learning Platform")

    with gr.Tab("Login"):
        username = gr.Textbox(label="Enter your name")
        login_btn = gr.Button("Login")
        login_output = gr.Textbox(label="Status")
        login_btn.click(fn=login, inputs=username, outputs=login_output)

    with gr.Tab("Google Classroom Sync"):
        sync_btn = gr.Button("Sync Courses")
        sync_output = gr.Textbox(label="Synced Courses")
        sync_btn.click(fn=sync_courses, inputs=username, outputs=sync_output)

    with gr.Tab("Quiz Generation"):
        subject_dropdown = gr.Dropdown(choices=available_subjects, label="Select Subject")
        quiz_btn = gr.Button("Generate Quiz")
        quiz_output = gr.Textbox(label="Quiz", lines=10)
        quiz_btn.click(fn=generate_quiz, inputs=[username, subject_dropdown], outputs=quiz_output)

    with gr.Tab("Answer Evaluation"):
        answer_input = gr.Textbox(label="Enter your answers (e.g., 1.A 2.C 3.B)")
        eval_btn = gr.Button("Submit Answers")
        eval_output = gr.Textbox(label="Evaluation Result")
        eval_btn.click(fn=evaluate_answers, inputs=[username, answer_input], outputs=eval_output)

    with gr.Tab("Performance Dashboard"):
        perf_btn = gr.Button("Show Performance")
        perf_output = gr.Textbox(label="Your Performance")
        perf_btn.click(fn=view_performance, inputs=username, outputs=perf_output)

# === Launch the App ===
demo.launch()